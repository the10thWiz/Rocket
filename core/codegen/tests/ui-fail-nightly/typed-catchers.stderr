error: invalid type
 --> tests/ui-fail-nightly/typed-catchers.rs:7:28
  |
7 | #[catch(default, error = "<foo>")]
  |                            ^^^
  |
note: Error argument must be a reference, found `std :: io :: Error`
 --> tests/ui-fail-nightly/typed-catchers.rs:8:18
  |
8 | fn isnt_ref(foo: std::io::Error) -> &'static str {
  |                  ^^^^^^^^^^^^^^
  = help: Perhaps use `&std :: io :: Error` instead

error: invalid type
  --> tests/ui-fail-nightly/typed-catchers.rs:12:28
   |
12 | #[catch(default, error = "<foo>")]
   |                            ^^^
   |
note: Error argument must be a reference, found `Foo`
  --> tests/ui-fail-nightly/typed-catchers.rs:13:27
   |
13 | fn isnt_ref_or_error(foo: Foo) -> &'static str {
   |                           ^^^
   = help: Perhaps use `&Foo` instead

error[E0277]: the trait bound `Foo: TypedError<'_>` is not satisfied
  --> tests/ui-fail-nightly/typed-catchers.rs:19:1
   |
19 | #[catch(default, error = "<foo>")]
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `TypedError<'_>` is not implemented for `Foo`
   |
   = help: the following other types implement trait `TypedError<'r>`:
             <() as TypedError<'r>>
             <Accepted<R> as TypedError<'_>>
             <AnyError<'r> as TypedError<'r>>
             <BadRequest<R> as TypedError<'_>>
             <Conflict<R> as TypedError<'_>>
             <Created<R> as TypedError<'_>>
             <Errors<'r> as TypedError<'r>>
             <Forbidden<R> as TypedError<'_>>
           and $N others
note: required by a bound in `type_id_of`
  --> $WORKSPACE/core/lib/src/catcher/types.rs
   |
   | pub fn type_id_of<'r, T: TypedError<'r> + Transient + 'r>() -> (TypeId, &'static str) {
   |                          ^^^^^^^^^^^^^^ required by this bound in `type_id_of`
   = note: this error originates in the attribute macro `catch` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0277]: the trait bound `Foo: Transient` is not satisfied
  --> tests/ui-fail-nightly/typed-catchers.rs:19:1
   |
19 | #[catch(default, error = "<foo>")]
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `rocket::catcher::Static` is not implemented for `Foo`, which is required by `Foo: Transient`
   |
   = help: the following other types implement trait `Transient`:
             &'_a &'_b &'a [T]
             &'_a &'_b &'a mut [T]
             &'_a &'_b &'a mut str
             &'_a &'_b &'a str
             &'_a &'_b ()
             &'_a &'_b AddrParseError
             &'_a &'_b Box<str>
             &'_a &'_b FromUtf16Error
           and $N others
   = note: required for `Foo` to implement `Transient`
note: required by a bound in `type_id_of`
  --> $WORKSPACE/core/lib/src/catcher/types.rs
   |
   | pub fn type_id_of<'r, T: TypedError<'r> + Transient + 'r>() -> (TypeId, &'static str) {
   |                                           ^^^^^^^^^ required by this bound in `type_id_of`
   = note: this error originates in the attribute macro `catch` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0277]: the trait bound `Foo: TypedError<'_>` is not satisfied
  --> tests/ui-fail-nightly/typed-catchers.rs:19:1
   |
19 | #[catch(default, error = "<foo>")]
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `TypedError<'_>` is not implemented for `Foo`
   |
   = help: the following other types implement trait `TypedError<'r>`:
             <() as TypedError<'r>>
             <Accepted<R> as TypedError<'_>>
             <AnyError<'r> as TypedError<'r>>
             <BadRequest<R> as TypedError<'_>>
             <Conflict<R> as TypedError<'_>>
             <Created<R> as TypedError<'_>>
             <Errors<'r> as TypedError<'r>>
             <Forbidden<R> as TypedError<'_>>
           and $N others
note: required by a bound in `downcast`
  --> $WORKSPACE/core/lib/src/catcher/types.rs
   |
   | pub fn downcast<'r, T: TypedError<'r> + Transient + 'r>(v: Option<&'r dyn TypedError<'r>>) -> Option<&'r T>
   |                        ^^^^^^^^^^^^^^ required by this bound in `downcast`
   = note: this error originates in the attribute macro `catch` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0277]: the trait bound `Foo: rocket::catcher::Static` is not satisfied
  --> tests/ui-fail-nightly/typed-catchers.rs:19:1
   |
19 | #[catch(default, error = "<foo>")]
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `rocket::catcher::Static` is not implemented for `Foo`, which is required by `Foo: Transient`
   |
   = help: the following other types implement trait `rocket::catcher::Static`:
             ()
             Accepted<R>
             AddrParseError
             BadRequest<R>
             Box<(dyn std::any::Any + 'static)>
             Box<str>
             Conflict<R>
             Created<R>
           and $N others
   = note: required for `Foo` to implement `Transient`
   = note: this error originates in the attribute macro `catch` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0277]: the trait bound `Foo: FromError<'_>` is not satisfied
  --> tests/ui-fail-nightly/typed-catchers.rs:25:37
   |
25 | fn doesnt_implement_from_error(foo: Foo) -> &'static str {
   |                                     ^^^ the trait `FromRequest<'_>` is not implemented for `Foo`, which is required by `Foo: FromError<'_>`
   |
   = help: the following other types implement trait `FromError<'r>`:
             &'r (dyn TypedError<'r> + 'r)
             &'r rocket::Request<'r>
             Status
             std::option::Option<&'r (dyn TypedError<'r> + 'r)>
   = note: required for `Foo` to implement `FromError<'_>`

error[E0277]: the trait bound `rocket::Request<'_>: FromError<'_>` is not satisfied
  --> tests/ui-fail-nightly/typed-catchers.rs:30:26
   |
30 | fn request_by_value(foo: Request<'_>) -> &'static str {
   |                          ^^^^^^^^^^^ the trait `FromRequest<'_>` is not implemented for `rocket::Request<'_>`, which is required by `rocket::Request<'_>: FromError<'_>`
   |
   = help: the following other types implement trait `FromError<'r>`:
             &'r (dyn TypedError<'r> + 'r)
             &'r rocket::Request<'r>
             Status
             std::option::Option<&'r (dyn TypedError<'r> + 'r)>
   = note: required for `rocket::Request<'_>` to implement `FromError<'_>`

warning: unused variable: `foo`
  --> tests/ui-fail-nightly/typed-catchers.rs:20:27
   |
20 | fn doesnt_implement_error(foo: &Foo) -> &'static str {
   |                           ^^^ help: if this is intentional, prefix it with an underscore: `_foo`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `foo`
  --> tests/ui-fail-nightly/typed-catchers.rs:25:32
   |
25 | fn doesnt_implement_from_error(foo: Foo) -> &'static str {
   |                                ^^^ help: if this is intentional, prefix it with an underscore: `_foo`

warning: unused variable: `foo`
  --> tests/ui-fail-nightly/typed-catchers.rs:30:21
   |
30 | fn request_by_value(foo: Request<'_>) -> &'static str {
   |                     ^^^ help: if this is intentional, prefix it with an underscore: `_foo`
